{
	"info": {
		"_postman_id": "458046bd-72cc-4e0b-bb1e-b732fff09ca5",
		"name": "Book Store API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26101764"
	},
	"item": [
		{
			"name": "POST User",
			"item": [
				{
					"name": "New User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = \r",
									"{\r",
									"    \"userID\": \"string\",\r",
									"    \"username\": \"string\",\r",
									"    \"books\": Array\r",
									"}\r",
									"\r",
									"pm.test(\"validate creation of new user\",function()\r",
									"{\r",
									"pm.response.to.have.status(201);\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"\r",
									"});\r",
									"\r",
									"let newUserResponseData = pm.response.json();\r",
									"pm.environment.set(\"userID\", newUserResponseData.userID);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var dynamicUserName = {}\r",
									"var dynamicPassword = {}\r",
									"\r",
									"var random1 = Math.floor((Math.random() * 10000) + 1).toString(36);\r",
									"\r",
									"dynamicUserName = (\"TestUser123456\".concat(random1));\r",
									"dynamicPassword = (\"TestUser123455677!\".concat(random1));\r",
									"\r",
									"pm.environment.set('dynamicUserName', JSON.stringify(dynamicUserName));\r",
									"pm.environment.set('dynamicPassword', JSON.stringify(dynamicPassword));\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\r\n \"userName\": {{dynamicUserName}},\r\n \"password\": {{dynamicPassword}}\r\n}\r\n\r\n\r\n     \r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://demoqa.com/Account/v1/User",
							"protocol": "https",
							"host": [
								"demoqa",
								"com"
							],
							"path": [
								"Account",
								"v1",
								"User"
							]
						}
					},
					"response": []
				},
				{
					"name": "Existing User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = \r",
									"{\r",
									"  \"code\": \"string\",\r",
									"  \"message\": \"string\"\r",
									"}\r",
									"\r",
									"pm.test(\"validate existing user\",function()\r",
									"{\r",
									"pm.response.to.have.status(406);\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"pm.expect(pm.response.text()).to.include(\"User exists\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userName\": {{dynamicUserName}},\r\n \"password\": {{dynamicPassword}}\r\n  \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://demoqa.com/Account/v1/User",
							"protocol": "https",
							"host": [
								"demoqa",
								"com"
							],
							"path": [
								"Account",
								"v1",
								"User"
							]
						}
					},
					"response": []
				},
				{
					"name": "badURL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"validate bad URL\",function()\r",
									"{\r",
									"pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://demoqa.com/Account/v1/wrongURL",
							"protocol": "https",
							"host": [
								"demoqa",
								"com"
							],
							"path": [
								"Account",
								"v1",
								"wrongURL"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "POST Token",
			"item": [
				{
					"name": "Generate Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let newToken = pm.response.json();\r",
									"pm.environment.set(\"TOKEN\", newToken.token);\r",
									"\r",
									"const schema = \r",
									"{\r",
									"token:\t\"string\",\r",
									"expires: \"string($date-time)\",\r",
									"status:\t\"string\",\r",
									"result:\t\"string\",\r",
									"}\r",
									"\r",
									"pm.test(\"validate token request\",function()\r",
									"{\r",
									"pm.response.to.have.status(200);\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userName\": {{dynamicUserName}},\r\n \"password\": {{dynamicPassword}}\r\n  \r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://demoqa.com/Account/v1/GenerateToken",
							"protocol": "https",
							"host": [
								"demoqa",
								"com"
							],
							"path": [
								"Account",
								"v1",
								"GenerateToken"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate Bad Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = \r",
									"{\r",
									"  \"code\": \"string\",\r",
									"  \"message\": \"string\"\r",
									"}\r",
									"\r",
									"pm.test(\"validate token bad request\",function()\r",
									"{\r",
									"pm.response.to.have.status(400);\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"pm.expect(pm.response.text()).to.include(\"UserName and Password required.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://demoqa.com/Account/v1/GenerateToken",
							"protocol": "https",
							"host": [
								"demoqa",
								"com"
							],
							"path": [
								"Account",
								"v1",
								"GenerateToken"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "POST Autorization",
			"item": [
				{
					"name": "Succssefull Autorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"const schema = \r",
									"{\r",
									"  \"userName\": \"string\",\r",
									"  \"password\": \"string\"\r",
									"}\r",
									"\r",
									"pm.test(\"validate positive autorization\",function()\r",
									"{\r",
									"pm.response.to.have.status(200);\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"pm.expect(pm.response.text()).to.include(\"true\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Bearer",
								"value": "123456",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userName\": {{dynamicUserName}},\r\n \"password\": {{dynamicPassword}}\r\n  \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://demoqa.com/Account/v1/Authorized",
							"protocol": "https",
							"host": [
								"demoqa",
								"com"
							],
							"path": [
								"Account",
								"v1",
								"Authorized"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unsuccssefull Autorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const getAutorizationResponse = pm.response.json();\r",
									"const schema = \r",
									"{\r",
									"  \"userName\": \"string\",\r",
									"  \"password\": \"string!\"\r",
									"}\r",
									"\r",
									"pm.test(\"validate negative autorisation\",function()\r",
									"{\r",
									"pm.response.to.have.status(200);\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"pm.expect(pm.response.text()).to.include(\"false\");\r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Bearer",
								"value": "123456",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userName\": \"UnauthorizedUser\",\r\n  \"password\": \"UnauthorizedUser123!\"\r\n  \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://demoqa.com/Account/v1/Authorized",
							"protocol": "https",
							"host": [
								"demoqa",
								"com"
							],
							"path": [
								"Account",
								"v1",
								"Authorized"
							]
						}
					},
					"response": []
				},
				{
					"name": "Autorization Bad Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = \r",
									"{\r",
									"  \"code\": \"string\",\r",
									"  \"message\": \"string\"\r",
									"}\r",
									"\r",
									"pm.test(\"validate autorization bad request\",function()\r",
									"{\r",
									"pm.response.to.have.status(400);\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"pm.expect(pm.response.text()).to.include(\"UserName and Password required.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Bearer",
								"value": "123456",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://demoqa.com/Account/v1/Authorized",
							"protocol": "https",
							"host": [
								"demoqa",
								"com"
							],
							"path": [
								"Account",
								"v1",
								"Authorized"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GET Account",
			"item": [
				{
					"name": "Get Account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = \r",
									"{\r",
									"    \"userId\": \"string\",\r",
									"    \"username\": \"string\",\r",
									"    \"books\": []\r",
									"}\r",
									"\r",
									"pm.test(\"validate new user account was created\",function()\r",
									"{\r",
									"pm.response.to.have.status(200);\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userId\": \"string\",\r\n  \"username\": \"string\",\r\n  \"books\": [\r\n    {\r\n      \"isbn\": \"string\",\r\n      \"title\": \"string\",\r\n      \"subTitle\": \"string\",\r\n      \"author\": \"string\",\r\n      \"publish_date\": \"2023-08-21T12:01:34.845Z\",\r\n      \"publisher\": \"string\",\r\n      \"pages\": 0,\r\n      \"description\": \"string\",\r\n      \"website\": \"string\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://demoqa.com/Account/v1/User/{{userID}}",
							"protocol": "https",
							"host": [
								"demoqa",
								"com"
							],
							"path": [
								"Account",
								"v1",
								"User",
								"{{userID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Unauthorized Account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = \r",
									"{\r",
									"  \"code\": \"string\",\r",
									"  \"message\": \"string\"\r",
									"}\r",
									"\r",
									"pm.test(\"validate user not authorized\",function()\r",
									"{\r",
									"pm.response.to.have.status(401);\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"pm.expect(pm.response.text()).to.include(\"User not authorized!\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userId\": \"string\",\r\n  \"username\": \"string\",\r\n  \"books\": [\r\n    {\r\n      \"isbn\": \"string\",\r\n      \"title\": \"string\",\r\n      \"subTitle\": \"string\",\r\n      \"author\": \"string\",\r\n      \"publish_date\": \"2023-08-21T12:01:34.845Z\",\r\n      \"publisher\": \"string\",\r\n      \"pages\": 0,\r\n      \"description\": \"string\",\r\n      \"website\": \"string\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://demoqa.com/Account/v1/User/{{userID}}",
							"protocol": "https",
							"host": [
								"demoqa",
								"com"
							],
							"path": [
								"Account",
								"v1",
								"User",
								"{{userID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GET Books",
			"item": [
				{
					"name": "GetBooks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const getBookResponse = pm.response.json();\r",
									"const schema = {\r",
									"  \"isbn\": \"string\",\r",
									"  \"title\": \"string\",\r",
									"  \"subTitle\": \"string\",\r",
									"  \"author\": \"string\",\r",
									"  \"publish_date\": \"2023-08-19T14:42:43.970Z\",\r",
									"  \"publisher\": \"string\",\r",
									"  \"pages\": 0,\r",
									"  \"description\": \"string\",\r",
									"  \"website\": \"string\"\r",
									"}\r",
									"\r",
									"let fetchISBN = pm.response.json();\r",
									"pm.environment.set(\"ISBN\", fetchISBN.books[0].isbn);\r",
									"\r",
									"let fetchISBN2 = pm.response.json();\r",
									"pm.environment.set(\"ISBN2\", fetchISBN2.books[1].isbn);\r",
									"\r",
									"let fetchISBN3 = pm.response.json();\r",
									"pm.environment.set(\"ISBN3\", fetchISBN2.books[2].isbn);\r",
									"\r",
									"pm.test(\"validate the Json response\",function()\r",
									"{\r",
									"pm.response.to.have.status(200);\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://demoqa.com/BookStore/v1/Books",
							"protocol": "https",
							"host": [
								"demoqa",
								"com"
							],
							"path": [
								"BookStore",
								"v1",
								"Books"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "POST Books",
			"item": [
				{
					"name": "Post Books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = \r",
									"{\r",
									"  \"isbn\": \"string\"\r",
									"}\r",
									"\r",
									"pm.test(\"validate new books were added to collection\",function()\r",
									"{\r",
									"pm.response.to.have.status(201);\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userId\": \"{{userID}}\",\r\n  \"collectionOfIsbns\": [\r\n    {\r\n      \"isbn\": \"{{ISBN}}\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://demoqa.com/BookStore/v1/Books",
							"protocol": "https",
							"host": [
								"demoqa",
								"com"
							],
							"path": [
								"BookStore",
								"v1",
								"Books"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post Non Existing Books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = \r",
									"{\r",
									"  \"code\": \"string\",\r",
									"  \"message\": \"string\"\r",
									"}\r",
									"\r",
									"pm.test(\"validate non-existing ISBN\",function()\r",
									"{\r",
									"pm.response.to.have.status(400);\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"pm.expect(pm.response.text()).to.include(\"ISBN supplied is not available in Books Collection!\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userId\": \"{{userID}}\",\r\n  \"collectionOfIsbns\": [\r\n    {\r\n      \"isbn\": \"123\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://demoqa.com/BookStore/v1/Books",
							"protocol": "https",
							"host": [
								"demoqa",
								"com"
							],
							"path": [
								"BookStore",
								"v1",
								"Books"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post Books Wrong Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = \r",
									"{\r",
									"  \"code\": \"string\",\r",
									"  \"message\": \"string\"\r",
									"}\r",
									"\r",
									"pm.test(\"validate post books bad id\",function()\r",
									"{\r",
									"pm.response.to.have.status(401);\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"pm.expect(pm.response.text()).to.include(\"User Id not correct!\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userId\": \"1234\",\r\n  \"collectionOfIsbns\": [\r\n    {\r\n      \"isbn\": \"{{ISBN}}\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://demoqa.com/BookStore/v1/Books",
							"protocol": "https",
							"host": [
								"demoqa",
								"com"
							],
							"path": [
								"BookStore",
								"v1",
								"Books"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GET Book",
			"item": [
				{
					"name": "Get Book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = \r",
									"{\r",
									"  \"code\": \"string\",\r",
									"  \"message\": \"string\"\r",
									"}\r",
									"\r",
									"pm.test(\"validate book ISBN is present in collection\",function()\r",
									"{\r",
									"pm.response.to.have.status(200);\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"pm.expect(pm.response.text()).to.include(pm.environment.get(\"ISBN\"));\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://demoqa.com/BookStore/v1/Book?ISBN=9781449325862",
							"protocol": "https",
							"host": [
								"demoqa",
								"com"
							],
							"path": [
								"BookStore",
								"v1",
								"Book"
							],
							"query": [
								{
									"key": "ISBN",
									"value": "9781449325862"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Non-Existing Book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = \r",
									"{\r",
									"  \"code\": \"string\",\r",
									"  \"message\": \"string\"\r",
									"}\r",
									"\r",
									"pm.test(\"validate book ISBN is not present in user's collection\",function()\r",
									"{\r",
									"pm.response.to.have.status(400);\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"pm.expect(pm.response.text()).to.include(\"ISBN supplied is not available in Books Collection!\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://demoqa.com/BookStore/v1/Book?ISBN=1234",
							"protocol": "https",
							"host": [
								"demoqa",
								"com"
							],
							"path": [
								"BookStore",
								"v1",
								"Book"
							],
							"query": [
								{
									"key": "ISBN",
									"value": "1234"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "PUT Book",
			"item": [
				{
					"name": "Put Book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = \r",
									"{\r",
									"  \"code\": \"string\",\r",
									"  \"message\": \"string\"\r",
									"}\r",
									"\r",
									"pm.test(\"validate book ISBN is present in collection\",function()\r",
									"{\r",
									"pm.response.to.have.status(200);\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userId\": \"{{userID}}\",\r\n  \"isbn\": \"{{ISBN2}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://demoqa.com/BookStore/v1/Books/{{ISBN}}",
							"protocol": "https",
							"host": [
								"demoqa",
								"com"
							],
							"path": [
								"BookStore",
								"v1",
								"Books",
								"{{ISBN}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Put Unavailable Book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = \r",
									"{\r",
									"  \"code\": \"string\",\r",
									"  \"message\": \"string\"\r",
									"}\r",
									"\r",
									"pm.test(\"validate unavalable book in users collection\",function()\r",
									"{\r",
									"pm.response.to.have.status(400);\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"pm.expect(pm.response.text()).to.include(\"ISBN supplied is not available in User's Collection!\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userId\": \"{{userID}}\",\r\n  \"isbn\": \"9781593277574\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://demoqa.com/BookStore/v1/Books/9781593275846",
							"protocol": "https",
							"host": [
								"demoqa",
								"com"
							],
							"path": [
								"BookStore",
								"v1",
								"Books",
								"9781593275846"
							]
						}
					},
					"response": []
				},
				{
					"name": "Put  Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = \r",
									"{\r",
									"  \"code\": \"string\",\r",
									"  \"message\": \"string\"\r",
									"}\r",
									"\r",
									"pm.test(\"validate wrong id while changing book order\",function()\r",
									"{\r",
									"pm.response.to.have.status(401);\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"pm.expect(pm.response.text()).to.include(\"User Id not correct!\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userId\": \"1234\",\r\n  \"isbn\": \"9781593277574\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://demoqa.com/BookStore/v1/Books/9781593275846",
							"protocol": "https",
							"host": [
								"demoqa",
								"com"
							],
							"path": [
								"BookStore",
								"v1",
								"Books",
								"9781593275846"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "DELETE Book",
			"item": [
				{
					"name": "Delete Book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"validate delete book\",function()\r",
									"{\r",
									"pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"isbn\": \"{{ISBN2}}\",\r\n  \"userId\": \"{{userID}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://demoqa.com/BookStore/v1/Book",
							"protocol": "https",
							"host": [
								"demoqa",
								"com"
							],
							"path": [
								"BookStore",
								"v1",
								"Book"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Unavailable Book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = \r",
									"{\r",
									"  \"code\": \"string\",\r",
									"  \"message\": \"string\"\r",
									"}\r",
									"\r",
									"pm.test(\"validate unavalable book in users collection\",function()\r",
									"{\r",
									"pm.response.to.have.status(400);\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"pm.expect(pm.response.text()).to.include(\"ISBN supplied is not available in User's Collection!\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"isbn\": \"122345\",\r\n  \"userId\": \"{{userID}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://demoqa.com/BookStore/v1/Book",
							"protocol": "https",
							"host": [
								"demoqa",
								"com"
							],
							"path": [
								"BookStore",
								"v1",
								"Book"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Book Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = \r",
									"{\r",
									"  \"code\": \"string\",\r",
									"  \"message\": \"string\"\r",
									"}\r",
									"\r",
									"pm.test(\"validate delete book unautorized\",function()\r",
									"{\r",
									"pm.response.to.have.status(401);\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"pm.expect(pm.response.text()).to.include(\"User Id not correct!\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"isbn\": \"{{ISBN}}\",\r\n  \"userId\": \"123456\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://demoqa.com/BookStore/v1/Book",
							"protocol": "https",
							"host": [
								"demoqa",
								"com"
							],
							"path": [
								"BookStore",
								"v1",
								"Book"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "DELETE Books",
			"item": [
				{
					"name": "Delete Books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"validate delete books\",function()\r",
									"{\r",
									"pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userId\": \"{{userID}}\",\r\n  \"collectionOfIsbns\": [\r\n    {\r\n      \"isbn\": \"{{ISBN}}\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://demoqa.com/BookStore/v1/Books?UserId={{userID}}",
							"protocol": "https",
							"host": [
								"demoqa",
								"com"
							],
							"path": [
								"BookStore",
								"v1",
								"Books"
							],
							"query": [
								{
									"key": "UserId",
									"value": "{{userID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Books Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"validate delete books unauthorized\",function()\r",
									"{\r",
									"pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userId\": \"{{userID}}\",\r\n  \"collectionOfIsbns\": [\r\n    {\r\n      \"isbn\": \"{{ISBN}}\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://demoqa.com/BookStore/v1/Books?UserId=12345",
							"protocol": "https",
							"host": [
								"demoqa",
								"com"
							],
							"path": [
								"BookStore",
								"v1",
								"Books"
							],
							"query": [
								{
									"key": "UserId",
									"value": "12345"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "DELETE User",
			"item": [
				{
					"name": "Delete User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"validate delete user\",function()\r",
									"{\r",
									"pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "123456",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://demoqa.com/Account/v1/User/{{userID}}",
							"protocol": "https",
							"host": [
								"demoqa",
								"com"
							],
							"path": [
								"Account",
								"v1",
								"User",
								"{{userID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"validate delete user unauthorized\",function()\r",
									"{\r",
									"pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "123456",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://demoqa.com/Account/v1/User/{{userID}}",
							"protocol": "https",
							"host": [
								"demoqa",
								"com"
							],
							"path": [
								"Account",
								"v1",
								"User",
								"{{userID}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "author_name",
			"value": "Richard E. Silverman",
			"type": "string"
		}
	]
}